package org.example.controller;


import org.example.model.JSONResponse;
import org.example.model.User;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

@RestController
@RequestMapping("/user")
public class UserController {
    @PostMapping("/login")
    public Object login(User user, HttpServletRequest req){
        JSONResponse json = new JSONResponse();
        if ("abc".equals(user.getUsername())){
            //通过请求头Cookie：JSESSIONID = xxx，在服务端map中通过xxx查找session
            //找到session就返回，如果没有，创建一个
            HttpSession session = req.getSession();
            session.setAttribute("user",user);
            json.setSuccess(true);
        }else {
            json.setCode("USERLOG");
            json.setMessage("用户或密码错误");
        }
        return json;
    }
}
package org.example.config.interceptor;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.JSONResponse;
import org.example.model.User;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.servlet.HandlerInterceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.PrintWriter;

public class LoginInterceptor implements HandlerInterceptor {

    private ObjectMapper objectMapper;

    public LoginInterceptor(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        HttpSession session = request.getSession(false);
        if (session != null){//获取登录时设置的用户信息
            User user = (User) session.getAttribute("user");
            if (user != null){//登录了，允许访问
                return true;
            }
        }
         //登陆失败，不允许访问的业务：区分前后端
        // TODO：前端跳转登录页面，后端返回json
       // new ObjectMapper().writeValueAsString(object);//序列化对象为json字符串
        //请求服务路径
        String servletPath = request.getServletPath();
        if (servletPath.startsWith("/api/")){//后端逻辑：返回json
            response.setCharacterEncoding("UTF-8");
            response.setContentType(MediaType.APPLICATION_JSON_VALUE);
            JSONResponse json = new JSONResponse();
            json.setCode("USER000");
            json.setMessage("用户没有登录，不允许访问");
            String s = objectMapper.writeValueAsString(json);
            response.setStatus(HttpStatus.UNAUTHORIZED.value());
            PrintWriter pw = response.getWriter();
            pw.println(s);
            pw.flush();
        }else {//前端逻辑：跳转到登录页面/views/index.html
            //相对路径的写法，一定是请求路径作为相对位置的参照点
            //使用绝对路径来重定向，不建议使用相对路径和转发
            String schema = request.getScheme();
            String host = request.getServerName();
            int port = request.getServerPort();
            String contextPath = request.getContextPath();
            String basePath = schema+"://"+host+":"+port+contextPath;
            //重定向到登录页面
            response.sendRedirect(basePath+"/views/index.html");
        }
        return false;
    }
}
package org.example.config;


import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.config.interceptor.LoginInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
//定义SpringMVC的启动配置类
@Configuration
public class AppConfig implements WebMvcConfigurer {

    @Autowired
    private ObjectMapper objectMapper;

    //配置Controller中请求映射方法路径匹配规则
    @Override
    public void configurePathMatch(PathMatchConfigurer configurer){
        //设置路径前缀的规则，以第二个参数的返回值作为请求映射
        configurer.addPathPrefix("api",c->true);
    }


    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new LoginInterceptor(objectMapper))
                //*代表路径下一级，**代表路径所有子集
                //所有后端非/user/开头的，只有指定得两个前端资源拦截器得逻辑
                .addPathPatterns("/api/**")
                .excludePathPatterns("/api/user/**")//后端开放的资源
                .addPathPatterns("/views/article.html")
                .addPathPatterns("/views/main.html");
    }
}
package org.example.controller;

import org.example.model.JSONResponse;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Date;

@RestController
@RequestMapping("/rest")
public class TestRestController {

    @GetMapping("/1")
    public Object test1(){
        JSONResponse resp = new JSONResponse();
        resp.setCode("LOG001");
        resp.setMessage("用户不存在");
        resp.setData(new Date());
        return resp;
    }
}
package org.example.controller;


import org.example.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/arg")
public class TestArgumentController {
    private static final Logger Log = LoggerFactory.getLogger(TestArgumentController.class);


    @GetMapping("/holiday{day}")
    public Object holiday(@PathVariable String day){
        Log.debug("获取到请求路径参数: "+day);
        Map<String ,Object> map = new HashMap<>();
        map.put("ok",true);
        return map;
    }
    @PostMapping("/login")
    public Object login(@RequestParam String username,@RequestParam String password){
        Log.debug("获取到请求路径参数: username="+username,"password"+password);
        Map<String ,Object> map = new HashMap<>();
        map.put("ok",true);
        return map;
    }
    @PostMapping("/login2")
    public Object login2(@RequestParam(required = false) Integer i) {
        Log.debug("获取到请求路径参数: i=" + i);
        Map<String, Object> map = new HashMap<>();
        map.put("ok", true);
        return map;
    }

    @PostMapping("/register")
    public Object register(@RequestParam String username, @RequestParam String password, @RequestParam MultipartFile file) throws IOException {
        Log.debug("获取到请求路径参数: username = {},password = {}",username,password);
        Log.debug("头像信息，名称={}，内容{}",file.getOriginalFilename(),new String(file.getBytes()));
        Map<String ,Object> map = new HashMap<>();
        map.put("ok",true);
        return map;
    }
    @PostMapping("/login/pojo")
    public Object loginPojo(User user){
        Log.debug("获取到请求路径参数: username={},password={}",user.getUsername(),user.getPassword());
        Map<String ,Object> map = new HashMap<>();
        map.put("ok",true);
        return map;
    }

    @PostMapping("/json")
    public Object json(@RequestBody User user){
        Log.debug("用户信息为：{}",user);
        Map<String ,Object> map = new HashMap<>();
        map.put("ok",true);
        return map;
    }
    @PostMapping("/file")
    public Object file(@RequestPart MultipartFile file)throws IOException{
        Log.debug("头像信息，名称 = {}",file.getOriginalFilename(),new String(file.getBytes()));
        Map<String ,Object> map = new HashMap<>();
        map.put("ok",true);
        return map;
    }
}